using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;
using System.Xml.Linq;
using log4net;
using Palmmedia.ReportGenerator.Common;
using Palmmedia.ReportGenerator.Parser.CodeAnalysis;

namespace Palmmedia.ReportGenerator.Parser
{
    /// <summary>
    /// Parser for XML reports generated by PartCover 2.2.
    /// </summary>
    public class PartCover22Parser : ParserBase, IParser
    {
        /// <summary>
        /// The logger.
        /// </summary>
        private static readonly ILog logger = LogManager.GetLogger(typeof(PartCover22Parser));

        /// <summary>
        /// The covered assemblies. The HashSet is used for caching.
        /// </summary>
        private HashSet<string> assembliesHashSet;

        /// <summary>
        /// Initializes a new instance of the <see cref="PartCover22Parser"/> class.
        /// </summary>
        /// <param name="report">The report file as XContainer.</param>
        public PartCover22Parser(XContainer report)
            : base(report)
        {
            // Init the HashSet containing the covered assemblies
            this.assembliesHashSet = new HashSet<string>(report.Descendants("type").Select(type => type.Attribute("asm").Value).Distinct());

            var fileIdByFilenameDictionary = report.Descendants("file").ToDictionary(f => f.Attribute("url").Value, f => f.Attribute("id").Value);

            AddCoverageDataOfAutoProperties(report);

            // Init the Dictionary containing the line coverage information
            Parallel.ForEach(
                this.Assemblies(),
                assembly =>
                {
                    logger.DebugFormat("  Current Assembly: {0}", assembly);

                    Parallel.ForEach(
                        this.ClassesInAssembly(assembly),
                        clazz =>
                        {
                            Parallel.ForEach(
                                this.FilesOfClass(assembly, clazz),
                                file =>
                                {
                                    string fileId = fileIdByFilenameDictionary[file];

                                    var seqpntsOfFile = report.Descendants("type")
                                        .Where(type => type.Attribute("asm").Value.Equals(assembly) && type.Attribute("name").Value.StartsWith(clazz, StringComparison.Ordinal))
                                        .Descendants("pt")
                                        .Where(seqpnt => seqpnt.HasAttributeWithValue("fid", fileId))
                                        .OrderBy(seqpnt => int.Parse(seqpnt.Attribute("sl").Value, CultureInfo.InvariantCulture))
                                        .ToArray();

                                    if (seqpntsOfFile.Length > 0)
                                    {
                                        var coverage = new int[int.Parse(seqpntsOfFile.Last().Attribute("sl").Value, CultureInfo.InvariantCulture) + 1];

                                        for (int i = 0; i < coverage.Length; i++)
                                        {
                                            coverage[i] = -1;
                                        }

                                        foreach (var seqpnt in seqpntsOfFile)
                                        {
                                            var index = int.Parse(seqpnt.Attribute("sl").Value, CultureInfo.InvariantCulture);
                                            var value = int.Parse(seqpnt.Attribute("visit").Value, CultureInfo.InvariantCulture);
                                            coverage[index] = coverage[index] == -1 ? value : coverage[index] + value;
                                        }

                                        this.LineCoverageByFileDictionary.TryAdd(assembly + "_" + clazz + "_" + file, coverage);
                                    }
                                });
                        });
                });
        }

        /// <summary>
        /// Determine all covered files.
        /// </summary>
        /// <returns>All covered files.</returns>
        public IEnumerable<string> Files()
        {
            return this.Report.Descendants("file")
                .Select(f => f.Attribute("url").Value)
                .ToArray();
        }

        /// <summary>
        /// Determine all covered assemblies.
        /// </summary>
        /// <returns>All covered assemblies.</returns>
        public IEnumerable<string> Assemblies()
        {
            return this.assembliesHashSet
                .OrderBy(value => value)
                .ToArray();
        }

        /// <summary>
        /// Determine all covered classes within an assembly.
        /// </summary>
        /// <param name="assemblyName">The name of the assembly.</param>
        /// <returns>All covered classes within an assembly.</returns>
        public IEnumerable<string> ClassesInAssembly(string assemblyName)
        {
            if (!this.assembliesHashSet.Contains(assemblyName))
            {
                return new string[] { };
            }

            return this.Report.Descendants("type")
                .Where(type => type.Attribute("asm").Value.Equals(assemblyName) && !type.Attribute("name").Value.Contains("__"))
                .Select(type => type.Attribute("name").Value)
                .OrderBy(name => name)
                .Distinct()
                .ToArray();
        }

        /// <summary>
        /// Determine all files a class is defined in.
        /// </summary>
        /// <param name="assemblyName">The name of the assembly.</param>
        /// <param name="className">The name of the class.</param>
        /// <returns>All files a class is defined in.</returns>
        public IEnumerable<string> FilesOfClass(string assemblyName, string className)
        {
            if (!this.assembliesHashSet.Contains(assemblyName))
            {
                return new string[] { };
            }

            var fileIds = this.Report.Descendants("type")
                .Where(type => type.Attribute("asm").Value.Equals(assemblyName) && type.Attribute("name").Value.Equals(className))
                .Elements("method")
                .Elements("code")
                .Elements("pt")
                .Where(pt => pt.Attribute("fid") != null)
                .Select(pt => pt.Attribute("fid").Value)
                .Distinct()
                .ToHashSet();

            return this.Report.Descendants("file")
                .Where(file => fileIds.Contains(file.Attribute("id").Value))
                .Select(file => file.Attribute("url").Value)
                .ToArray();
        }

        /// <summary>
        /// Determine how often a line of code has been covered.
        /// If line could not be covered at all -1 is returned.
        /// </summary>
        /// <param name="assemblyName">The name of the assembly.</param>
        /// <param name="className">The name of the class.</param>
        /// <param name="fileName">The name of the file.</param>
        /// <param name="lineNumber">The number of the line (starting with 1, not zero based).</param>
        /// <returns>Number of visits.</returns>
        public int NumberOfLineVisits(string assemblyName, string className, string fileName, int lineNumber)
        {
            if (!this.assembliesHashSet.Contains(assemblyName))
            {
                return -1;
            }

            var key = assemblyName + "_" + className + "_" + fileName;
            if (this.LineCoverageByFileDictionary.ContainsKey(key))
            {
                var coverage = this.LineCoverageByFileDictionary[key];
                return (coverage.Length > lineNumber) ? coverage[lineNumber] : -1;
            }
            else
            {
                return -1;
            }
        }

        /// <summary>
        /// Adds the coverage data of auto properties.
        /// </summary>
        /// <param name="report">The report file as XContainer.</param>
        private static void AddCoverageDataOfAutoProperties(XContainer report)
        {
            Func<string, bool> isProperty = v => v.StartsWith("get_", StringComparison.Ordinal) || v.StartsWith("set_", StringComparison.Ordinal);

            var unexecutedProperties = report.Descendants("method").Where(m => isProperty(m.Attribute("name").Value)
                && !m.Element("code").Elements().Any(pt => pt.Attribute("sl") != null));

            var filenameByFileIdDictionary = report.Descendants("file").ToDictionary(f => f.Attribute("id").Value, f => f.Attribute("url").Value);

            foreach (var property in unexecutedProperties)
            {
                PropertyElement propertyElement = new PropertyElement(property.Attribute("name").Value);

                // Get files in which method could be defined
                var fileIds = property.Parent.Descendants("pt").Where(p => p.Attribute("fid") != null).Select(p => p.Attribute("fid").Value).Distinct();

                foreach (var file in fileIds)
                {
                    var elementPosition = SourceCodeAnalyzer.FindSourceElement(filenameByFileIdDictionary[file], propertyElement);

                    if (elementPosition == null)
                    {
                        continue;
                    }

                    foreach (var pt in property.Element("code").Elements().Take(1))
                    {
                        pt.Add(new XAttribute("sl", elementPosition.Start));
                        pt.Add(new XAttribute("fid", file));
                    }

                    break;
                }
            }
        }
    }
}
